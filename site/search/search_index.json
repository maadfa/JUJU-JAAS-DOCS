{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Juju &amp; JAAS Documentation","text":""},{"location":"#what-is-juju","title":"What is Juju?","text":"<p>Juju is an open-source application modeling tool developed by Canonical.It helps you deploy, configure, scale, and manage cloud-based applications and services efficiently.</p> <p>Key Features of Juju</p> <ul> <li> <p>Model-Driven Architecture:  Juju helps users to define your application setup and relationships using models.Instead of manually configuring infrastructure and services,users can define high-level models that describe the desired state of their application  and it describes the  relationships between different components</p> </li> <li> <p>Reusable Charms:Charms are the core building blocks in Juju,including all the operational knowledge required to deploy, configure, and manage a specific application or service. These are resuable and  event-driven scripts  that act like application blueprintsand  handles tasks such as installation, scaling, monitoring, and integration with other charms. By using charms, users can standardize the deployment process.It helps to  reduce repetitive scripting work, and ensure best practices are followed every time an application is deployed. Juju also maintains a public Charm Store where users can find community-contributed and officially maintained charms for a wide range of applications and services.This allows  teams to focus more on business logic and less on infrastructure setup.</p> </li> <li> <p>Cloud Agnostic: Works across multiple cloud providers like AWS, Azure, Google Cloud, OpenStack, and even bare metal.One of Juju\u2019s greatest strengths is its cloud-agnostic design. It provides a  framework for deploying applications across public clouds like AWS, Google Cloud Platform, and Microsoft Azure, as well as private clouds such as OpenStack, or even on bare metal servers using MAAS (Metal as a Service) or local containers with LXD. This flexibility enables organizations to  adopt hybrid or multi-cloud strategies with ease. Whether you're operating in a development, staging, or production environment, Juju allows you to replicate and manage your application models consistently across all platforms, thereby streamlining DevOps workflows and increasing deployment portability.</p> </li> <li> <p>GUI and CLI Support: Manage environments via command-line interface (CLI) or a graphical web-based GUI. Juju offers both a feature-rich Command-Line Interface (CLI) and an intuitive Graphical User Interface (GUI), fulfills  the needs of both technical users and those who prefer visual tools. The CLI is ideal for scripting, automation, and advanced configurations, giving users complete control over deployments and operations. On the other hand, the GUI provides a visual modeling environment where users can drag and drop services, define relationships, and monitor the status of their applications in real time. This dual-interface approach enhances user experience by offering flexibility in how environments are managed, monitored, and scaled.It makes  making Juju accessible to both beginners and experienced DevOps professionals.</p> </li> </ul>"},{"location":"cli-reference/","title":"Juju CLI Reference","text":"<p>This guide provides an overview of essential Juju CLI (Command-Line Interface) commands. It's a text-based interface that allows users to interact with a computer, software, or system by typing commands into a terminal or console,instead of clicking on tabs,buttons or menu etc.Use Windows Powershell terminal to run commands and interact with juju.The Juju CLI is the primary way users interact with Juju to deploy, manage, and scale applications on various cloud platforms.</p>"},{"location":"cli-reference/#getting-started","title":"Getting Started","text":"<p>To verify that Juju is installed correctly, open your terminal and type:</p> <p><pre><code>juju version\n\nThis should return the current version of Juju installed on your machine.\n\n   ---\n\n\n   # Bootstrap a Controller\n\nA **controller** is the brain of Juju operations. It manages models, machines, and applications. Before you can deploy any services or charms, you need to **bootstrap** a controller. Bootstrapping sets up the initial environment where Juju can operate and manage your deployments.Run the following command for bootstrapping .\n\n```bash\njuju bootstrap &lt;cloud-name&gt; &lt;controller-name&gt;\n\n\n\nThe cloud name specifies which cloud environment one  wants to deploy Juju on.A cloud can be a public cloud (like AWS, Azure, Google Cloud), a private cloud (like OpenStack), or even a local environment (like LXD).\n\nThe controller name is a custom name given  to your Juju controller\nA controller is the brain of Juju; it manages your models and deployments.\nNaming the controller helps you identify it, especially if one  manages multiple controllers.\n\n ** Example\nSuppose you want to bootstrap Juju on the public cloud called aws and name your controller my-controller.Then\n\n```bash\njuju bootstrap aws my-controller\n\n\nJuju will start provisioning resources on AWS.\n\nYou will see output showing the bootstrap process, including creating instances and setting up the controller.\n\nOnce complete, you get a success message like:\n\n!!! success \"Bootstrap Successful\"\n    Controller \"my-controller\" bootstrapped on cloud \"aws\"\n\nAfter bootstrapping, you can start deploying applications with Juju using this controller.\n\n## Add a Model\n\nAfter bootstrapping a controller in Juju, the next step is to **add a model**. A **model** in Juju is like a workspace or environment where you deploy and manage your applications.\nA model is a container for applications and their configurations.\n\nEach model is isolated from others. This means you can have different versions of the same application deployed in different models without any error.\n\n```bash\njuju add-model &lt;model-name&gt;\n\n\n&lt;model-name&gt; is the name you want to give your model. It should be simple and descriptive.Good examples are  dev, testing, production, or my-webapp etc.\n\n```bash\njuju add-model dev\n\nThis command adds a new model named dev under the currently active controller.\n\n## Expected Output\n</code></pre> Added 'dev' model on my-controller/default with credential 'default' for user 'admin' ```</p> <p>This message confirms that your model has been successfully added and is ready for deployments.</p>"},{"location":"cli-reference/#useful-tips","title":"Useful Tips","text":"<p>You can view all your models using:</p> <p>```bash juju models</p>"},{"location":"cli-reference/#to-switch-between-models","title":"To switch between models:","text":"<p>To switch between the Models ,run  the following  commands on your terminal </p> <p>```bash juju switch : <p>** Example</p> <p>```bash juju switch my-controller:dev</p>"},{"location":"cli-reference/#deploy-an-application-charm","title":"Deploy an Application (Charm)","text":"<p>Run the following command in your terminal .</p> <p>```bash juju deploy  <p>This command deploys an application using a \"charm\" (a package of operational code). Charms automate the installation and configuration of software.</p> <p>Example</p> <p>```bash juju deploy mysql</p> <p>This command Deploys MySQL database.</p>"},{"location":"cli-reference/#relate-applications","title":"Relate Applications","text":"<p>Many applications depend on others. This command connects services so they can communicate e.g., linking a web app to a database.</p> <p>```bash juju relate  <p>Example </p> <p>```bash juju relate wordpress mysql</p>"},{"location":"cli-reference/#add-units-scale-application","title":"Add Units (Scale Application)","text":"<p>Add units to  to scale your app by adding more instances (units). This improves reliability and handles more user traffic.</p> <p>```bash juju add-unit  -n  <p>Example</p> <p>```bash juju add-unit mysql -n 2</p> <p>This command adds two more MYSQL.</p>"},{"location":"cli-reference/#check-status","title":"Check Status","text":"<p>This shows a real-time overview of all deployed services, units, machines, and their health status.</p> <p>```bash juju status</p> <p>## Remove Application</p> <p>It is  useful for cleanup or switching apps. It uninstalls an application and removes it from your model.</p> <p>```bash juju remove-application  <p>## Destroy Model</p> <p>This deletes the entire model and all applications and units inside it.</p> <p>```bash juju destroy-model  <p>** Example </p> <p>```bash juju destroy-model wordpress-site</p>"},{"location":"errors/","title":"Common Juju Errors and How to Fix Them","text":"<p>When using juju via CLI,following errrors can occur .</p>"},{"location":"errors/#1-juju-bootstrap-error-cloud-not-found","title":"1. <code>Juju Bootstrap</code> Error: Cloud Not Found","text":"<p>This error usually appears when you try to bootstrap a controller without specifying a valid cloud name.</p>"},{"location":"errors/#how-to-fix","title":"How to Fix:","text":"<p>Use a valid cloud name from the list of available clouds. To see available clouds, run:</p> <pre><code>juju clouds\n</code></pre> <p>Then use one of those clouds in your bootstrap command:</p> <pre><code>juju bootstrap lxd my-controller\n</code></pre>"},{"location":"errors/#permission-denied-or-access-denied-on-windows","title":"Permission denied or access denied on Windows","text":"<p>This error occurs when you may not have admin rights or execution permission to install or run Juju.To fix this error ,define a clear path for your system .In case of error,your terminal will show error like</p> <p>!!! error \"Command Not Recognized\"     <pre><code>'juju' is not recognized as an internal or external command,\noperable program or batch file.\n</code></pre></p> <p>This error means that your computer doesn\u2019t know where to find the Juju program. The system looks for executable programs in the \"PATH\" environment variable, and Juju hasn\u2019t been added to that list yet.</p>"},{"location":"errors/#how-to-fix_1","title":"How to fix","text":"<p>??? info \"Steps to Add Juju to PATH on Windows\"     <pre><code>Find the location where juju.exe is saved\n\nAdd this folder to your system PATH:\n\n1. Open Start Menu and search for \"Environment Variables\"\n2. Click \"Edit the system environment variables\"\n3. In the System Properties window, click \"Environment Variables...\"\n4. Under System variables, select \"Path\"\n5. Click \"New\", then paste the Juju path (e.g., C:\\Program Files\\juju)\n6. Click OK to save and exit all dialogs\n</code></pre></p> <p>Then, Restart your terminal and Run the command again</p> <p><pre><code>juju version\n\n\nYou should now see something like\n</code></pre> 3.4.0-ubuntu-amd64 ```</p> <p>!!! tip \"Pro Tip\"     If you still see the error after updating PATH, restart your computer to make sure the environment variable changes take effect.</p>"},{"location":"jaas/","title":"\u2601\ufe0f JAAS (Juju-as-a-Service)","text":"<p>JAAS (Juju-as-a-Service) is a cloud-hosted version of Juju, provided by Canonical, which allows users to deploy applications without setting up their own Juju controller. It runs on Canonical infrastructure and is accessible through a web interface.</p>"},{"location":"jaas/#why-use-jaas","title":"\ud83d\udd0d Why Use JAAS?","text":"<p>JAAS is ideal for: - Beginners who want to test Juju quickly - Teams avoiding controller setup and server management - DevOps users running quick Proof of Concepts (POCs) - Enterprises deploying production-ready applications with reduced maintenance</p>"},{"location":"jaas/#key-features","title":"\u2705 Key Features","text":"<ul> <li>Zero infrastructure: No need to install or manage a Juju controller</li> <li>Web interface: Drag-and-drop GUI via JAAS dashboard</li> <li>Charm Store integration: Use pre-built application definitions</li> <li>Cloud compatibility: Works with AWS, GCP, Azure, and Kubernetes</li> </ul>"},{"location":"jaas/#getting-started-with-jaas","title":"\ud83d\ude80 Getting Started with JAAS","text":""},{"location":"jaas/#step-1-visit-jaas","title":"Step 1: Visit JAAS","text":"<p>Go to the official JAAS dashboard: \ud83d\udd17 https://jaas.ai</p>"},{"location":"jaas/#step-2-sign-in","title":"Step 2: Sign In","text":"<p>Sign in using your Ubuntu One account. \ud83d\udd11 If you don\u2019t have one, create it here.</p>"},{"location":"jaas/#step-3-launch-your-first-model","title":"Step 3: Launch Your First Model","text":"<ol> <li>Click \u201cNew Model\u201d</li> <li>Search for a charm like <code>wordpress</code>, <code>mysql</code>, or <code>mattermost</code></li> <li>Drag and drop charms onto the canvas</li> <li>Click \u201cDeploy\u201d</li> </ol>"},{"location":"jaas/#common-jaas-commands-cli","title":"\ud83e\uddd1\u200d\ud83d\udcbb Common JAAS Commands (CLI)","text":"<p>You can also use JAAS with the Juju CLI:</p> <pre><code>juju login\njuju add-model my-jaas-model\njuju deploy wordpress\njuju deploy mysql\njuju relate wordpress mysql\n</code></pre>"},{"location":"use-cases/","title":"Use Cases","text":""},{"location":"use-cases/#use-cases-for-juju","title":"Use Cases for Juju","text":"<p>Juju is a powerful open-source operator lifecycle management tool developed by Canonical (the creators of Ubuntu). It helps manage, configure, scale, and operate software and infrastructure across public clouds, private data centers, and even on bare metal.</p> <p>This section explains where and why you might use Juju in real-world scenarios.</p>"},{"location":"use-cases/#cloud-application-deployment","title":"Cloud Application Deployment","text":"<p>Juju is widely used to deploy and manage applications across multiple clouds like:</p> <ul> <li>AWS</li> <li>Microsoft Azure</li> <li>Google Cloud Platform</li> <li>OpenStack</li> </ul> <p>Example: You want to deploy a Kubernetes cluster on AWS. Instead of manually provisioning resources and configuring them, Juju can do this using reusable, tested charms.</p>"},{"location":"use-cases/#microservices-and-container-orchestration","title":"Microservices and Container Orchestration","text":"<p>Juju works well with Kubernetes and helps manage microservice-based architectures.</p> <p>Example: You're running a microservices app with 10 different containers. Juju lets you deploy, scale, and monitor these services with defined relationships, updates, and rollback capabilities.</p>"},{"location":"use-cases/#devops-automation","title":"DevOps Automation","text":"<p>With Juju, you can codify infrastructure and application operations. This helps DevOps teams automate repetitive tasks.</p> <p>Use case: - Automate backups - Automatically scale services based on load - Monitor logs and set up alerts</p>"},{"location":"use-cases/#testing-and-prototyping-environments","title":"Testing and Prototyping Environments","text":"<p>Juju is ideal for spinning up short-lived environments for testing software stacks or experimenting with configurations.</p> <p>Example: A QA team wants to test the latest version of a database stack. Juju can quickly deploy a pre-configured environment for them, then destroy it when testing is done.</p>"},{"location":"use-cases/#monitoring-observability-and-scaling","title":"Monitoring, Observability, and Scaling","text":"<p>Juju integrates with observability tools like Prometheus, Grafana, and Loki.</p> <p>Example: Deploy a monitoring stack using charms. Juju handles the configuration and relationships between them. Scaling can be done by running:</p>"},{"location":"use-cases/#multi-user-collaboration-and-access-control","title":"Multi-User Collaboration and Access Control","text":"<p>Juju supports models and controllers to separate responsibilities across teams.</p> <p>Use Case: - A development team can work in a model to test apps - A production team controls the live deployment model - Access permissions are set per user or team</p>"}]}